include "target.tmh"
include "Macros/M_StarCitizen.ttm"

//program startup
int main()
{
 	
	if(Init(&EventHandle)) return 1; // declare the event handler, return on error
	
	
	//Pour pouvoir utiliser le bouton 5 de la souris sans qu'elle revienne au centre à chaque clic
	//dans le fichier defines.tmh
	//desactivation des lignes:
	//819	define MOUSE_X_AXIS		9
	//820	define MOUSE_Y_AXIS		10
	//821	define MOUSE_Z_AXIS		11
	
	//remplacé par:
	//819	define MOUSE_X_AXIS		9997
	//820	define MOUSE_Y_AXIS		9998
	//821	define MOUSE_Z_AXIS		9996
	//c'est bizarre pour le define MOUSE_Z_AXIS avec son 9996 mais au moins ça marche

//=================== WARTHOG ==================//


	//===============LAYERS TOGGLE==============
	SetShiftButton(&Joystick, S3, &Throttle, BSF, BSB);
	
		
	//============STICK SETTING===================
			
	
		//********Stick axis mapping***************
		MapAxis(&Joystick, JOYX, DX_X_AXIS);							//STICK ROLL AXIS
		MapAxis(&Joystick, JOYY, DX_Y_AXIS);							//STICK PITCH AXIS
		
		SetSCurve(&Joystick, JOYX,25,0,25,0,0);
		SetSCurve(&Joystick, JOYY,0,0,0,0,0);

			//********Stick buttons mapping***********
	
			//TRIGGER 1
			MapKeyIOUMD(&Joystick, TG1, PULSE+Reticle_Mode_Toggle, DX_Fire_Weapon_Grp_1,
										PULSE+Reticle_Mode_Toggle, CHAIN(DX_Fire_Weapon_Grp_1, DX_Fire_Weapon_Grp_2),
										PULSE+Reticle_Mode_Toggle, DX_Fire_Weapon_Grp_2);	
			
			//TRIGGER 2
			MapKey(&Joystick, TG2, 0);
				
			//NWS
			MapKey(&Joystick, S1, 0);
	
			//RED BUTTON
			MapKeyIO(&Joystick, S2, PULSE+Cycle_Weapon_Ammo, DX_Launch_Missile);		
								
			//IO MODE SWITCH
			MapKey(&Joystick, S3, 0);	// USED FOR IO TOGGLE!!!
	
			//PALETTE
			MapKey(&Joystick, S4, DX_Interaction_Mode);
			
			//HAT1 - TRIM HAT
			MapKeyIO(&Joystick, H1U, EXEC("TrimDXAxis(DX_Y_AXIS, -1);"), 
									 PULSE+Match_Target_Velocity);								//TRIM HAT UP POSITION
			MapKeyIO(&Joystick, H1D, EXEC("TrimDXAxis(DX_Y_AXIS, 1);"), 
									 ESP_Toggle);											//TRIM HAT DOWN POSITION
			MapKeyIO(&Joystick, H1L, EXEC("TrimDXAxis(DX_Y_AXIS, SET(0));"), 
									 PULSE+Decoupled_Mode_Toggle);								//TRIM HAT LEFT POSITION
			MapKeyIO(&Joystick, H1R, EXEC("TrimDXAxis(DX_Y_AXIS, SET(0));"), 
									 0);														//TRIM HAT RIGHT POSITION
			//HAT2 - TMS
			MapKeyIO(&Joystick, H2U, DX_Shield_Raise_Front, DX_Strafe_Up);						//TMS UP POSITION
			MapKeyIO(&Joystick, H2D, DX_Shield_Raise_Back, DX_Strafe_Down);						//TMS DOWN POSITION
			MapKeyIO(&Joystick, H2L, DX_Shield_Raise_Left, DX_Strafe_Left);						//TMS LEFT POSITION
			MapKeyIO(&Joystick, H2R, DX_Shield_Raise_Right, DX_Strafe_Right);					//TMS RIGHT POSITION			

			//HAT3 - DMS
			MapKeyIO(&Joystick, H3U, 0, PULSE+Reset_Power_Distribution);						//DMS UP POSITION
			MapKeyIO(&Joystick, H3D, 0, PULSE+Power_Preset_Inc_Dec_3);							//DMS DOWN POSITION
			MapKeyIO(&Joystick, H3L, Power_Decrease, PULSE+Power_Preset_Inc_Dec_1);				//DMS LEFT POSITION
			MapKeyIO(&Joystick, H3R, Power_Increase, PULSE+Power_Preset_Inc_Dec_2);				//DMS RIGHT POSITION
	
			//HAT4 - CMS
			MapKeyIO(&Joystick, H4P, PULSE+Cycle_Sub_Target_Back, PULSE+Cycle_Sub_Target);			//CMS PUSHED POSITION
			MapKeyIO(&Joystick, H4U, PULSE+Pin_Focused_Target, DX_Reticle_Focus);					//CMS UP POSITION
			MapKeyIO(&Joystick,	H4D, PULSE+Cycle_Pinned_Targets, DX_Target_Nearest_Hostile);		//CMS DOWN POSITION
			MapKeyIO(&Joystick,	H4L, PULSE+Cycle_Friendly_Targets_Back, DX_Cycle_Friendly_Targets);	//CMS LEFT POSITION
			MapKeyIO(&Joystick,	H4R, PULSE+Cycle_Hostile_Targets_Back, DX_Cycle_Hostile_Targets);	//CMS RIGHT POSITION
						
		
	//===============THROTTLE SETTING========================
	
		
		//------------THROTTLE BASE---------------------
		
		
		//*******Throttle base axis mapping***********	
		MapAxis(&Throttle, THR_LEFT,	DX_SLIDER_AXIS, AXIS_REVERSED);				//THROTTLE L ENGINE AXIS
		MapAxis(&Throttle, THR_RIGHT,	DX_THROTTLE_AXIS, AXIS_REVERSED);			//THROTTLE R ENGINE AXIS
		MapAxis(&Throttle, THR_FC,		DX_Z_AXIS, AXIS_REVERSED);					//THROTTLE NOT FRICTION AXIS
		
		// Le throttle est sur l'axe Throttle Forward
		SetCustomCurve(&Throttle, THR_LEFT, LIST(0,0, 40,25, 100,100));

		//MapAxis(&Throttle, THR_RIGHT,	DX_THROTTLE_AXIS, AXIS_REVERSED);			//THROTTLE R ENGINE AXIS
		//SetSCurve(&Throttle, THR_RIGHT, 0, 1, 0, 3, 0);
		
			//*******Throttle base buttons mapping********
			
			//FUEL
			MapKey(&Throttle, EFLNORM, 0);									//FUEL ENG L NORM
			MapKey(&Throttle, EFLOVER, 0);									//FUEL ENG L OVERRIDE
				
			MapKey(&Throttle, EFRNORM, 0);									//FUEL ENG R NORM
			MapKey(&Throttle, EFROVER, 0);									//FUEL ENG R OVERRIDE
				
			//ENG OPER
			MapKey(&Throttle, EOLIGN, 0);									//ENG OPER L IGN
			MapKey(&Throttle, EOLNORM, 0);									//ENG OPER L NORM
			MapKey(&Throttle, EOLMOTOR, 0);									//ENG OPER L MOTOR
				
			MapKey(&Throttle, EORIGN, 0);									//ENG OPER R IGN
			MapKey(&Throttle, EORNORM, 0);									//ENG OPER R NORM
			MapKey(&Throttle, EORMOTOR, 0);									//ENG OPER R MOTOR
				
			//APU
			MapKey(&Throttle, APUON, 0);									//APU START
			MapKey(&Throttle, APUOFF, 0);									//APU OFF
				
			//SILENCE
			MapKeyIO(&Throttle, LDGH, 	TEMPO(0, DX_Eject, 1000),
										TEMPO(0, PULSE+Exit_Seat, 500));	//LANDING GEAR HORN WARNING SILENCER
				
			//AUTOPILOT LASTE
			MapKeyIO(&Throttle, APPAT, PULSE+Power_Toggle, 
										PULSE+Power_Preset_1_Toggle_Weapons);	//AUTOPILOT LASTE PATH MODE
			MapKey(&Throttle, APAH, 0);										//AUTOPILOT LASTE ALT/HDG MODE
			MapKeyIO(&Throttle, APALT, PULSE+Power_Preset_3_Toggle_Engine, 
										PULSE+Power_Preset_2_Toggle_Shield);	//AUTOPILOT LASTE ALT MODE
				
			//AUTOPILOT ENGAGE/DISENGAGE
			MapKey(&Throttle, APDIS, TEMPO(	PULSE+Quantum_Drive_Mode_Toggle, 
											DX_Quantum_Drive, 200));		//AUTOPILOT ENGAGE/DISENGAGE
				
			
			//RDR ALTM
			MapKey(&Throttle, RDRNRM, PULSE+Headlights_Toggle);				//RDR ALTM NORM
			MapKey(&Throttle, RDRDIS, PULSE+Headlights_Toggle);				//RDR ALTM DIS
				
			//EAC
			MapKey(&Throttle, EACON, CHAIN(PULSE+Landing_System_Toggle, 			
			EXEC("SetSCurve(&Throttle, SCX,0,100,0,0,-20);SetSCurve(&Throttle, SCY,0,100,0,0,-20);")));	//EAC ARM
			MapKey(&Throttle, EACOFF, CHAIN(PULSE+Landing_System_Toggle,						
			EXEC("SetSCurve(&Throttle, SCX,0,35,0,0,-5);SetSCurve(&Throttle, SCY,0,35,0,0,-5);")));		//EAC OFF
				
			//FLAPS
			
			MapKey(&Throttle, FLAPU, 0);									//FLAPS UP
			MapKey(&Throttle, FLAPM, 0);									//FLAPS MIDDLE
			MapKey(&Throttle, FLAPD, 0);									//FLAPS DOWN
			
			//MapKey(&Throttle, FLAPU, EXEC("SetSCurve(&Joystick, JOYX,25,0,25,0,0);SetSCurve(&Joystick, JOYY,0,0,0,0,0);"));	//FLAPS UP
			//MapKey(&Throttle, FLAPM, EXEC("SetSCurve(&Joystick, JOYX,25,1,25,0,0);SetSCurve(&Joystick, JOYY,0,1,0,0,0);"));	//FLAPS MIDDLE
			//MapKey(&Throttle, FLAPD, EXEC("SetSCurve(&Joystick, JOYX,35,1,35,0,0);SetSCurve(&Joystick, JOYY,0,1,0,0,0);"));	//FLAPS DOWN			
			
			//IDLE
			MapKey(&Throttle, IDLELON, 0);									//IDLE LEFT ENGINE
			MapKey(&Throttle, IDLERON, EXEC("SetSCurve(&T16000, JOYX,0,1,0,1,-2);SetSCurve(&T16000, JOYY,0,1,0,0,0);"));	//IDLE RIGHT ENGINE
			MapKeyR(&Throttle, IDLERON, EXEC("SetSCurve(&T16000, JOYX,0,3,0,2,0);SetSCurve(&T16000, JOYY,0,3,0,2,0);"));	
		
		
		
				//==============THROTTLE LEVERS=============================
						
						
						
				//*******Left throttle lever buttons mapping********
				
					//RED BUTTON
					MapKeyIO(&Throttle, LTB, PULSE+Print_Screen, PULSE+Outside_View);	//LEFT THROTTLE LEVER RED BUTTON

					//PINKY SWITCH
					MapKey(&Throttle, PSF, PULSE+Mining_Mode_Toggle);				//PINKY SWITCH FRONT POSITION
					MapKeyR(&Throttle, PSF, PULSE+Mining_Mode_Toggle);
					MapKey(&Throttle, PSM, 0);										//PINKY SWITCH MIDDLE POSITION
					MapKey(&Throttle, PSB, PULSE+Scanning_Mode_Toggle);				//PINKY SWITCH BACK POSITION
					MapKeyR(&Throttle, PSB, PULSE+Scanning_Mode_Toggle);		
				


				//******Right throttle lever axis mapping**********

				MapAxis(&Throttle,	SCX, DX_XROT_AXIS,AXIS_NORMAL,MAP_ABSOLUTE);		//SLEW CONTROL X AXIS
				MapAxis(&Throttle,	SCY, DX_YROT_AXIS,AXIS_REVERSED,MAP_ABSOLUTE);		//SLEW CONTROL Y AXIS
				

					//******Right throttle lever buttons mapping*******
					
					//SLEW CONTROL PUSH BUTTON
					MapKey(&Throttle, SC, 0);											//SLEW CONTROL PUSH BUTTON
					

					//COOLIE HAT
					MapKeyIO(&Throttle, CSU, DX_Shield_Raise_Top, DX_Strafe_Forward_Backward_Invert);	//COOLIE HAT UP POSITION
					MapKeyIO(&Throttle, CSD, DX_Shield_Raise_Bottom, PULSE+Cruise_Control_Toggle);		//COOLIE HAT DOWN POSITION
					MapKeyIO(&Throttle, CSL, PULSE+Mobiglas, PULSE+Scanning_Decrease_Radar_Angle);		//COOLIE HAT LEFT POSITION
					MapKeyIO(&Throttle, CSR, PULSE+Starmap, PULSE+Scanning_Increase_Radar_Angle);		//COOLIE HAT RIGHT POSITION


					//MIC SWITCH
					MapKeyIO(&Throttle, MSP, 0, 0);													//MIC SWITCH PUSHED POSITION
					MapKeyIO(&Throttle, MSU, PULSE+Track_Ir_Center, DX_Push_to_Talk);				//MIC SWITCH UP POSITION
					MapKeyIO(&Throttle, MSD, PULSE+Track_Ir_Pause, FOIP_Push_To_Talk);				//MIC SWITCH DOWN POSITION
					MapKeyIO(&Throttle, MSL, PULSE+Shield_Levels_Reset, DX_Scanning_Radar_Ping);	//MIC SWITCH LEFT POSITION
					MapKeyIO(&Throttle, MSR, 0, 0);													//MIC SWITCH RIGHT POSITION

					//SPEED BRAKE
					MapKey(&Throttle, SPDF, DX_Afterburner);							//SPEED BRAKE FORWARD POSITION
					MapKey(&Throttle, SPDM, 0);											//SPEED BRAKE MIDDLE POSITION
					MapKey(&Throttle, SPDB, DX_Spacebrake);								//SPEED BRAKE BACKWARD POSITION				
								
					//BOAT SWITCH
					MapKey(&Throttle, BSF, 0);	//USED FOR UMD TOGGLE					//BOAT SWITCH FORWARD POSITION
					MapKey(&Throttle, BSM, 0);	//USED FOR UMD TOGGLE					//BOAT SWITCH MIDDLE POSITION
					MapKey(&Throttle, BSB, 0);	//USED FOR UMD TOGGLE					//BOAT SWITCH BACKWARD POSITION	

					//CHINA HAT
					MapKey(&Throttle, CHF, PULSE+Cycle_CM_Ammo);						//CHINA HAT FORWARD POSITION
					MapKey(&Throttle, CHM, 0);											//CHINA HAT MIDDLE POSITION
					MapKey(&Throttle, CHB, PULSE+Launch_CounterMeasure);				//CHINA HAT BACKWARD POSITION			
				
				
				
				//////////////////////////////////////////////////////////////////////////



//================== T16000 ====================//

			MapAxis(&T16000, JOYX, DX_XROT_AXIS);
			MapAxis(&T16000, JOYY, DX_YROT_AXIS, AXIS_REVERSED);
			MapAxis(&T16000, RUDDER, 0); 
			MapAxis(&T16000, THR, 0);

			//SetSCurve(&T16000, JOYX,0,3,0,2,0);
			//SetSCurve(&T16000, JOYY,0,3,0,2,0);
			
			
			SetSCurve(&T16000, JOYX,0,1,0,0,0);
			SetSCurve(&T16000, JOYY,0,1,0,0,0);			


			//MapKeyIO(&T16000, H1U, 	EXEC("TrimDXAxis(DX_THROTTLE_AXIS, SET(0));"), REXEC(0, 5, "TrimDXAxis(DX_THROTTLE_AXIS, 2);"));		// HAT UP
			//MapKeyIO(&T16000, H1D, EXEC("TrimDXAxis(DX_THROTTLE_AXIS, SET(0));"), REXEC(0, 5, "TrimDXAxis(DX_THROTTLE_AXIS, -2);"));	// HAT DOWN
									
									
									
			MapKey(&T16000, H1U, AXIS(DX_THROTTLE_AXIS, 250, 20));					
			MapKey(&T16000, H1D, AXIS(DX_THROTTLE_AXIS, -250, 20));			
			MapKey(&T16000, H1L, PULSE+Launch_CounterMeasure);		// HAT LEFT
			MapKey(&T16000, H1R, PULSE+Cycle_CM_Ammo);				// HAT RIGHT 

			MapKey(&T16000, TS1, DX_Afterburner);			// TRIGGER		
			MapKey(&T16000, TS2, DX_Push_to_Talk);			// STICK BACK BUTTON
			MapKey(&T16000, TS3, FOIP_Push_To_Talk);		// STICK LEFT BUTTON
			MapKey(&T16000, TS4, DX_Spacebrake);			// STICK RIGHT BUTTON
			 
			 
			MapKey(&T16000, B5, 0);
			MapKey(&T16000, B6, 0);
			MapKey(&T16000, B7, 0);
			MapKey(&T16000, B8, 0);
			MapKey(&T16000, B9, 0);
			MapKey(&T16000, B10, 0);
			MapKey(&T16000, B11, 0);
			MapKey(&T16000, B12, 0);
			MapKey(&T16000, B13, 0);
			MapKey(&T16000, B14, 0);
			MapKey(&T16000, B15, 0);
			MapKey(&T16000, B16, 0);
			


}

//event handler
int EventHandle(int type, alias o, int x)
{
    DefaultMapping(&o, x);
	
	//add event handling code here
}
